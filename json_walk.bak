BEGIN{
    # Path Module
    path_idx = 0
    key_path[path_idx] = "."
    mode_path[path_idx] = "value"

    # General module
    false = 0
    true = 1
}

# Ord module

function debug(msg){
	# print "DEBUG:" msg > "/dev/stderr"
}

function json_walk_panic(msg, s, s_idx,     start){
	# print "DEBUG:" msg > "/dev/stderr"

    start = s_idx - 10
    if (start <= 0) start = 1

    panic(msg " [index=" s_idx "]:\n-------------------\n" substr(s, start, 30) "\n-------------------")
}

BEGIN {
    ord_init()
}

function ord_init(    low, high, i, t)
{
    low = sprintf("%c", 7) # BEL is ascii 7
    if (low == "\a") {    # regular ascii
        low = 0
        high = 127
    } else if (sprintf("%c", 128 + 7) == "\a") {
        # ascii, mark parity
        low = 128
        # low = 0
        high = 255
    } else {        # ebcdic(!)
        low = 0
        high = 255
    }

    for (i = low; i <= high; i++) {
        t = sprintf("%c", i)
        _ord_[t] = i
    }
}

function ord(c){
    return _ord_[c]
}

# function str_startswith(s, tgt){
#     if (substr(s, 1, length(tgt)) == tgt) return true
#     return false
# }

# function char_at(s, idx) {
#     return substr(s, idx, 1)
# }


# function char_is_number(c,      o) {
#     o = _ord_[c]
#     if ( (o >= 48) && (o <= 57) ) {
#         return true
#     }
#     return false
# }

function panic(msg){
    print msg >"/dev/stderr"
    exit 1
}


function json_walk_string1(s, s_len, s_idx,     o_idx, c, slash, pos){
    # debug("json_walk_string start() ")

    o_idx = s_idx
    c = substr(s, s_idx, 1)
    if (c != "\"") {
        JSON_WALK_STRING_IDX = s_idx
        # debug("json_walk_string not right() ")
        return false
    }

    slash = 0
    while (s_idx < s_len) {
        s_idx ++
        c = substr(s, s_idx, 1)

        if (c == "\"") {
            # debug("json_walk_string continue() " c " " slash " " token)
            if (slash % 2 == 0) {
                s_idx ++
                # debug("json_walk_string break() " c " " slash " " token)
                break
            }
            slash = 0
        } else if (c == "\\") {
            slash ++
        } else {
            slash = 0
        }
    }

    JSON_WALK_STRING_IDX = s_idx
    # print "--" JSON_WALK_STRING_IDX
    # JSON_WALK_STRING_TOKEN = substr(s, o_idx, s_idx - o_idx)

    # debug("json_walk_string end() ")

    return true
}

function json_walk_string(s, s_len, s_idx,     o_idx, c, slash, ss, pos){
    # debug("json_walk_string start() ")

    o_idx = s_idx
    c = substr(s, s_idx, 1)
    if (c != "\"") {
        JSON_WALK_STRING_IDX = s_idx
        # debug("json_walk_string not right() ")
        return false
    }

    s_idx ++
    pos = index(substr(s, s_idx), "\"")
    if (pos <= 0) {
        json_walk_panic("Expect !!!")
    } else {
        s_idx += pos
    }

    JSON_WALK_STRING_IDX = s_idx
    # print "--" JSON_WALK_STRING_IDX
    # JSON_WALK_STRING_TOKEN = substr(s, o_idx, s_idx - o_idx)

    # debug("json_walk_string end() ")

    return true
}

# JSON_WALK_EMPTY_IDX = 0
# JSON_WALK_EMPTY_TOKEN = ""
function json_walk_empty(s, s_len, s_idx,     o_idx, o, token, slash){
    token = ""
    o_idx = s_idx
    while (s_idx < s_len) {
        c = substr(s, s_idx, 1)

        if (_ord_[c] > 32) break

        s_idx ++
    }

    JSON_WALK_EMPTY_IDX = s_idx
    # JSON_WALK_EMPTY_TOKEN = substr(s, o_idx, s_idx - o_idx)

    # debug("json_walk_empty: " idx " --- " length(JSON_WALK_EMPTY_TOKEN))

    if (s_idx == o_idx) {
        return false
    } else {
        return true
    }
}


# Handle 
function json_walk_number(s, s_len, s_idx,      o_idx, c) {
    JSON_WALK_NUMBER_IDX = s_idx
    JSON_WALK_NUMBER_TOKEN = ""

    o_idx = s_idx

    c = substr(s, s_idx, 1)
    # 0 represent not found
    if ( index("-0123456789e.", c) == 0 ) {
        # debug("json_walk_number(): fail first letter: " c " " index("-0123456789e.", c) )
        return false
    }

    s_idx ++

    while (s_idx <= s_len) {
        # debug("json_walk_number(): " s_idx " " s_len " " c)
        c = substr(s, s_idx, 1)
        # 0 represent not found
        if ( index("-0123456789e.", c) == 0 ) break
        s_idx ++
    }

    JSON_WALK_NUMBER_IDX = s_idx
    # JSON_WALK_NUMBER_TOKEN = substr(s, o_idx, s_idx - o_idx)
    # debug("json_walk_number end(): " JSON_WALK_NUMBER_TOKEN)

    return true
}


function json_walk_primitive(s, s_len, s_idx,     token, slash){
    JSON_WALK_PRIMITIVE_IDX = s_idx;                 # JSON_WALK_PRIMITIVE_TOKEN = ""

    if ( substr(s, s_idx, 4) == "true" ) {
        JSON_WALK_PRIMITIVE_IDX = s_idx + 4;        # JSON_WALK_PRIMITIVE_TOKEN = "true"
    } else if ( substr(s, s_idx, 5) == "false" ) {
        JSON_WALK_PRIMITIVE_IDX = s_idx + 5;        # JSON_WALK_PRIMITIVE_TOKEN = "false"
    }  else if ( substr(s, s_idx, 4) == "null" ) {
        JSON_WALK_PRIMITIVE_IDX = s_idx + 4;        # JSON_WALK_PRIMITIVE_TOKEN = "null"
    }else {
        # debug("json_walk_primitive(): json_walk_number()" )
        if (json_walk_number(s, s_len, s_idx) == false) {
            # debug("json_walk_primitive(): json_walk_number()" )
            return false
        }
        JSON_WALK_PRIMITIVE_IDX = JSON_WALK_NUMBER_IDX; # JSON_WALK_PRIMITIVE_TOKEN = JSON_WALK_NUMBER_TOKEN
    }

    # debug("json_walk_primitive(): " JSON_WALK_PRIMITIVE_TOKEN)

    return true
}

function json_walk_dict(s, s_len, s_idx,     c, o_idx){
    o_idx = s_idx

    JSON_WALK_DICT_IDX = s_idx;     JSON_WALK_DICT_TOKEN = ""

    c = substr(s, s_idx, 1)
    if (c != "{") return false
    s_idx ++;
    
    while (1) {
        if (json_walk_empty(s, s_len, s_idx) == true) {     # optional
            s_idx = JSON_WALK_EMPTY_IDX;
        }

        c = substr(s, s_idx, 1)
        if (c == "}") {
            s_idx ++;  break
        } else if (json_walk_string(s, s_len, s_idx) == true) {    # key
            s_idx = JSON_WALK_STRING_IDX;
        } else {
            json_walk_panic("json_walk_dict() Expect a key", s, s_idx)
        }

        if (json_walk_empty(s, s_len, s_idx) == true) {     # optional
            s_idx = JSON_WALK_EMPTY_IDX;
        }

        c = substr(s, s_idx, 1)
        if (c == ":") {
            s_idx ++;
        } else {
            json_walk_panic("json_walk_dict() Expect :", s, s_idx)
        }

        if (json_walk_empty(s, s_len, s_idx) == true) {     # optional
            s_idx = JSON_WALK_EMPTY_IDX;
        }

        if (json_walk_value(s, s_len, s_idx) == true) {     # value
            s_idx = JSON_WALK_VALUE_IDX;
        } else {
            json_walk_panic("json_walk_dict() Expect a value", s, s_idx)
        }

        if (json_walk_empty(s, s_len, s_idx) == true) {     # optional
            s_idx = JSON_WALK_EMPTY_IDX;
        }

        c = substr(s, s_idx, 1)
        if (c == ",") {
            s_idx ++;
        }
    }

    JSON_WALK_DICT_IDX = s_idx;     # JSON_WALK_DICT_TOKEN = substr(s, o_idx, s_idx - o_idx)
    # debug("json_walk_dict: " JSON_WALK_DICT_TOKEN)
    return true
}

# JSON_WALK_EMPTY_IDX = 0
# JSON_WALK_EMPTY_TOKEN = ""

function json_walk_array(s, s_len, s_idx,     c, o_idx){
    
    o_idx = s_idx

    # debug("json_walk_array start() ")
    JSON_WALK_ARRAY_IDX = s_idx;    JSON_WALK_ARRAY_TOKEN = "";

    c = substr(s, s_idx, 1)
    if (c != "[") return false

    s_idx ++

    while (1) {
        # debug("loop")
        if (json_walk_empty(s, s_len, s_idx) == true) {     # optional
            s_idx = JSON_WALK_EMPTY_IDX
        }

        c = substr(s, s_idx, 1)
        if (c == "]") {
            s_idx ++;  break
        } else if (json_walk_value(s, s_len, s_idx) == true) {     # value
            s_idx = JSON_WALK_VALUE_IDX;
        } else {
            json_walk_panic("json_walk_array() Expect a value", s, s_idx)
        }

        if (json_walk_empty(s, s_len, s_idx) == true) {     # optional
            s_idx = JSON_WALK_EMPTY_IDX;
        }

        # debug("-> detect")

        c = substr(s, s_idx, 1)
        if (c == ",") {
            s_idx ++;
        }
    }

    JSON_WALK_ARRAY_IDX = s_idx;    # JSON_WALK_ARRAY_TOKEN = substr(s, o_idx, s_idx - o_idx)
    # debug("json_walk_array end(): " JSON_WALK_ARRAY_TOKEN)
    return true
}

function json_walk_cb_value(token){
    return token
}

# string | primitive | dict | array
function json_walk_value(s, s_len, s_idx,     c, token, o_idx){
    o_idx = s_idx

    if (json_walk_string(s, s_len, s_idx) == true) {    # key
        # JSON_WALK_STRING_TOKEN = json_walk_cb_value(JSON_WALK_STRING_TOKEN)
        s_idx = JSON_WALK_STRING_IDX;
        
    } else if (json_walk_primitive(s, s_len, s_idx) == true) {
        s_idx = JSON_WALK_PRIMITIVE_IDX;
    } else if (json_walk_dict(s, s_len, s_idx) == true) {
        s_idx = JSON_WALK_DICT_IDX;
    } else if (json_walk_array(s, s_len, s_idx) == true) {
        s_idx = JSON_WALK_ARRAY_IDX;
    } else {
        # panic("json_walk_value() Expect a value: ->" substr(s, s_idx, 10))
        return false
    }

    JSON_WALK_VALUE_IDX = s_idx;    # JSON_WALK_VALUE_TOKEN = substr(s, o_idx, s_idx - o_idx)
    return true
}

function json_walk_cb(s, s_idx, e_idx){
    # print ("---", e_idx substr(s, s_idx, e_idx - s_idx))
    # substr(s, s_idx, e_idx - s_idx)
    print(substr(s, s_idx, e_idx - s_idx))
}

function json_walk(s,       s_len, s_idx, idx, o_idx){
    o_idx = 1

    s_len = length(s);      s_idx = 1
    while (s_idx <= s_len) {
        idx = s_idx
        if (json_walk_empty(s, s_len, idx) == true) {     # optional
            idx = JSON_WALK_EMPTY_IDX;
        }

        if (json_walk_value(s, s_len, idx) == true) {     # value
            idx = JSON_WALK_VALUE_IDX;
        } else {
            # debug("json_walk_value() Out -> " s_idx " : " )
            break
        }

        if (json_walk_empty(s, s_len, idx) == true) {     # optional
            idx = JSON_WALK_EMPTY_IDX;
        }

        if (s_idx == idx) {
           json_walk_panic("json_walk() Expect a value", s, s_idx)
        }

        json_walk_cb(s, s_idx, idx)

        s_idx = idx
    }
}
