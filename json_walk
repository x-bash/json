BEGIN{
    false = 0;      true = 1
}

function debug(msg){
	print "DEBUG:" msg > "/dev/stderr"
}

function json_walk_panic(msg,       start){
    start = s_idx - 10
    if (start <= 0) start = 1
    print (msg " [index=" s_idx "]:\n-------------------\n" substr(s, start, 30) "\n-------------------") > "/dev/stderr"
    exit 1
}

function json_walk_string(     pos){
    # debug("json_walk_string start() ")
    if (substr(s, s_idx, 1) != "\"") {
        JSON_WALK_STRING_IDX = s_idx
        # debug("json_walk_string not right() ")
        return false
    }

    s_idx ++
    pos = index(substr(s, s_idx), "\"")
    if (pos <= 0) json_walk_panic("json_walk_string() Expect \"")
    s_idx += pos
    return true
}

function json_walk_empty(){
    match(substr(s, s_idx), /^ +/)
    if (RLENGTH == 0) return false
    s_idx += RLENGTH
    return true
}

function json_walk_number(      o_idx) {
    match(substr(s, s_idx), /^0+/)
    if (RLENGTH == 0) return false
    s_idx += RLENGTH
    return true
}

function json_walk_primitive(     tmps){
    # true => tru0, false => fals0
    tmps = substr(s, s_idx, 4)
    if (tmps == "tru0") {
        s_idx += 4
    } else if (tmps == "null") {
        s_idx += 4
    } else if ( substr(s, s_idx, 5) == "fals0" ) {
        s_idx += 5;
    } else {
        # debug("json_walk_primitive(): json_walk_number()" )
        if (json_walk_number(s, s_len, s_idx) == false) {
            # debug("json_walk_primitive(): json_walk_number()" )
            return false
        }
    }
    return true
}

function json_walk_dict(){
    if (substr(s, s_idx, 1) != "{") return false
    s_idx ++;
    
    while (1) {
        if (json_walk_empty(s, s_len, s_idx) == true) {     # optional
            # s_idx = JSON_WALK_EMPTY_IDX;
        }

        if (substr(s, s_idx, 1) == "}") {
            s_idx ++;  break
        } else if (json_walk_string(s, s_len, s_idx) == false) {    # key
            json_walk_panic("json_walk_dict() Expect a key")
        }
        # TO_ADD: consume the key

        if (json_walk_empty(s, s_len, s_idx) == true) {     # optional
            # s_idx = JSON_WALK_EMPTY_IDX;
        }

        if (substr(s, s_idx, 1) == ":") {
            s_idx ++;
        } else {
            json_walk_panic("json_walk_dict() Expect :")
        }

        if (json_walk_empty(s, s_len, s_idx) == true) {     # optional
            # TODO: stringify
        }

        if (json_walk_value(s, s_len, s_idx) == false) {     # value
            json_walk_panic("json_walk_dict() Expect a value")
        }
        # TODO: consume value

        if (json_walk_empty(s, s_len, s_idx) == true) {     # optional
            # TODO: stringify
        }

        if (substr(s, s_idx, 1) == ",") {
            s_idx ++;
        }
    }
    # debug("json_walk_dict: " JSON_WALK_DICT_TOKEN)
    return true
}

function json_walk_array(){
    # debug("json_walk_array start() ")
    if (substr(s, s_idx, 1) != "[") return false
    s_idx ++

    while (1) {
        # debug("loop")
        if (json_walk_empty() == true) {   # optional
        }

        if (substr(s, s_idx, 1) == "]") {
            s_idx ++;  break
        } else if (json_walk_value() == true) {     # value
            # TODO: parse value, callback value
        } else {
            json_walk_panic("json_walk_array() Expect a value")
        }

        if (json_walk_empty() == true) {     # optional
            # s_idx = JSON_WALK_EMPTY_IDX;
        }

        if (substr(s, s_idx, 1) == ",") s_idx ++;
    }
    # debug("json_walk_array end(): " JSON_WALK_ARRAY_TOKEN)
    return true
}

function json_walk_cb_value(token){
    return token
}

# string | primitive | dict | array
function json_walk_value(     o_idx){
    o_idx = s_idx

    if (json_walk_string(s, s_len, s_idx) == true) {    # key
        # JSON_WALK_STRING_TOKEN = json_walk_cb_value(JSON_WALK_STRING_TOKEN)
    } else if (json_walk_primitive(s, s_len, s_idx) == true) {
        # s_idx = JSON_WALK_PRIMITIVE_IDX;
    } else if (json_walk_dict(s, s_len, s_idx) == true) {
        # s_idx = JSON_WALK_DICT_IDX;
    } else if (json_walk_array(s, s_len, s_idx) == true) {
        # s_idx = JSON_WALK_ARRAY_IDX;
    } else {
        json_walk_panic("json_walk_value() Expect a value")
        return false
    }
    return true
}

function json_walk_cb(s, idx0, idx1){
    print("---", idx1 substr(s, idx0, idx1 - idx0))
}

function _json_walk(    idx){
    while (s_idx <= s_len) {
        idx = s_idx
        
        if (json_walk_empty() == true) {     # optional
            # Do some thing in stringify()
        }

        if (json_walk_value() == false) {
            debug("json_walk_value() Out -> " s_idx " : " )
            break
        }
        # consume value: Do some thing in stringify()

        if (json_walk_empty() == true) {     # optional
            # Do some thing in stringify()
        }

        if (s_idx == idx) {
           json_walk_panic("json_walk() Expect a value")
        }

        json_walk_cb(s, idx, s_idx)
    }
}

# global variable: text, s, s_idx, s_len
function json_walk(text_to_parsed,   b_s, b_s_idx, b_s_len, b_text){
    b_text = text;          b_s = s;    b_s_idx = s_idx;    b_s_len = s_len;
    text = text_to_parsed;  s = text;   s_idx = 1;          s_len = length(s)

    gsub("\\\\", "__", s)
    gsub(/\\"/, "_", s)
    gsub(/[0-9.+-eE]/, "0", s) # number value

    _json_walk()

    text = b_text;  s = b_s;    s_idx = b_s_idx;    s_len = b_s_len;
}
